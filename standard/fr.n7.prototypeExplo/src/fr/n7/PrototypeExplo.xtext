grammar fr.n7.PrototypeExplo with org.eclipse.xtext.common.Terminals

generate prototypeExplo "http://www.n7.fr/PrototypeExplo"
Map: 'map' name=STRING
	'elements' '{' elements += MapElements+ '}'
;

MapElements: Explorer | Place | Item | Path | NPC | Choice | Action | Condition | Knowledge;

/*E3 E6*/
Explorer: 'explorer' name=STRING 
	'maxSize' maxSize=INT 
	('items' items+=ItemID+)? 
	('knowledges' knowledges+=Knowledge+)?
;



Description: condition=ConditionID description=STRING
;


ConditionalItem: 'condition' condition=ConditionID 
	'for' item=ItemID
;

/*E5 E40 E41 E42*/
Item: 'item' name=STRING 
	'description' description=Description 
	'size' size=INT 
	'visibleCondition' visibleCondition=ConditionID
	('transformabilityConditions' transformabilityCondition=ConditionalItem)?
;


ConditionalKnowledge: 'condition' condition=ConditionID 
	'for' knowledge=KnowledgeID
;

/*E3 */
Knowledge: 'knowledge' name=STRING 
	'description' description=Description 
	'visibleCondition' visibleCondition=ConditionID
;



/*E7 E14*/
Place: 'place' name=STRING 
	'description' description=Description 
	'type' type=PlaceType 
	'canPlaceItem' canPlaceItem=Bool 
	'paths' paths+=PathID+ 
	('items' items+=ItemID+)? 
	('knowledges' knowledges+=KnowledgeID+)? 
	('NPCs' npcs+=NPCID+)?
;

/*E8 */
PlaceType: normal = 'normal'
	| begin = 'begin'
	| end = 'end'
;

/*E9 E10 E11 E16 E20*/
Path: 'path' name=STRING 
	'description' description+=Description 
	'visibleCondition' visibleCondition=ConditionID
	'openedCondition' openedCondition=ConditionID 
	'obligatoryCondition' obligatoryCondition=ConditionID 
	'extremity1' startingPlace=PlaceID 
	'extremity2' finishingPlace=PlaceID 
	('items' items+=ConditionalItem+)? 
	('knowledges' knowledges+=ConditionalKnowledge+)? 
	('itemsConsumed' itemsConsumed+=ConditionalItem+)?
;


/*Type booléen */
Bool: true = 'true'
	| false = 'false'
;

/*E25 */
NPC: 'npc' name=STRING 
	'isObligatory' isObligatory=Bool 
	'visibleCondition' visibleCondition=ConditionID 
	'initialChoices' initialChoice+=BeginningChoice+
	;

/*E23 */
Condition: 'condition' name=STRING 
	'formula' formula=NormalDisjunctiveForm
;

/* Description des conditions*/
Comparator: lt='<' 
	| gt='>' 
	| lte='<=' 
	| gte='>=' 
	| eq='=' 
	| neq='!='
;

Negation: 'not';
AtomicCondition: Negation? ((item=ItemID comparateur=Comparator constante=INT )| KnowledgeID);

Conjunction: conditions += AtomicCondition ('and' conditions += AtomicCondition)*;

NormalDisjunctiveForm: conjunctions += Conjunction ('or' conjunctions += Conjunction)*;


/* E30 */
Choice: 'choice' name=STRING
	'text' text = STRING
	'endingCondition' endingCondition=ConditionID 
	'answers' '{' answers+=ConditionnalAnswer* '}'
;

Answer: 'answer' name=STRING 'action' action=ActionID 'nextChoice' nextChoice += ConditionalChoice+;

BeginningChoice: 'beginning' 'condition' condition=ConditionID 
	'for' Choice=ChoiceID;


ConditionalChoice: 'condition' condition=ConditionID 
	'for' Choice=ChoiceID
;


Action: 'action' name=STRING 
	('items' items+=ConditionalItem+)? 
	('knowledges' knowledges+=ConditionalKnowledge+)? 
	('itemsConsumed' itemsConsumed+=ConditionalItem+)?
;

ConditionnalAnswer: 'conditionnalAnswer' condition=ConditionID 
	('precedentActions' precedentActions+=ActionCondition+)? 
	'for' answer=Answer
;

ActionCondition: 'condition' condition=ConditionID 
	'for' action=ActionID
;

/*En soit inutile, pour se repérer plus facilement */
ItemID: STRING;
KnowledgeID: STRING;
AnswerID : STRING;
ConditionID: STRING | Bool;
PlaceID: STRING;
PathID: STRING;
NPCID: STRING;
ChoiceID: STRING;
ActionID: STRING;
ExplorerID: STRING;